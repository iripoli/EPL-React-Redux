{"version":3,"sources":["components/card/cards.js","components/cardList/cardList.js","components/searchbox/searchbox.js","components/scroll/scroll.js","components/errorBoundry/errorBoundry.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","badge","className","src","alt","CardList","teams","map","team","i","key","id","idTeam","strTeam","strTeamBadge","SearchBox","searchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","padding","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","fetch","then","res","json","teamsData","onSearchChange","filteredTeams","filter","toLowerCase","includes","length","overflow","connect","dispatch","event","payload","target","value","Boolean","window","location","hostname","match","initialState","store","createStore","action","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e03486ec.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, badge})=>{\n\n\n  return(\n    <>\n    <div className=\"card tc dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={badge} alt='Team Badge' className=\"badge\"/>\n      <div>\n        <h3>{name}</h3>\n      </div>\n\n    </div>\n    </>\n  )\n}\n\nexport default Card;","import React from 'react'\nimport Card from '../card/cards.js'\n\n\n\nconst CardList = ({teams}) => {\n  return (\n    <div>\n      {teams.map((team, i) => {\n        return (\n          <Card key={i}\n            id={team.idTeam}\n            name={team.strTeam}\n            badge={team.strTeamBadge} />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default CardList","import React from  'react';\n\n\nconst SearchBox = ({searchBox,searchChange})=>{\n\n  return(\n    <input \n      type=\"search\"\n      placeholder=\"Search teams\" \n      className=\"pa3 ba b--green bg-lightest-blue searchbox\"\n      onChange={searchChange}\n    />\n\n  )\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props)=>{\n  return (\n    <div style={{ overflowY:'scroll', borderTop:'1px solid black', height:'500px', padding:'50px', padding: '17px', boxSizing: 'content-box', width:'100%'}}>\n      {props.children}\n    </div>\n      )\n}\n\nexport default Scroll;","import React, {Component} from 'react'\n\n\nclass ErrorBoundry extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n  componentDidCatch(error, info){\n    this.setState({hasError: true})\n  }\n\n  render(){\n    return(\n      this.state.hasError ?  (<h1>Unexpected Error</h1>)  :  (<div>{ this.props.children }</div>)\n\n    )\n    \n    }\n  }\n\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport CardList from './components/cardList/cardList'\nimport './App.css';\nimport SearchBox from './components/searchbox/searchbox';\nimport Scroll from './components/scroll/scroll';\nimport ErrorBoundry from './components/errorBoundry/errorBoundry';\n\nimport { setSearchBox } from './actions'\n\n\n\nconst mapStateToProps = state =>{\n  return {\n    searchBox: state.searchBox\n  }\n}\n\nconst mapDispatchToProps = (dispatch)=>{\n  return{\n  onSearchChange: (event)=>dispatch(setSearchBox(event.target.value))\n  }\n}\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      teams: []\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://www.thesportsdb.com/api/v1/json/1/search_all_teams.php?l=English%20Premier%20League')\n      .then(res => {\n        return res.json();\n      })\n      .then(teamsData => {\n        return (\n          this.setState({ teams: teamsData.teams }));\n      })\n  }\n\n\n  render() {\n\n    const { teams } = this.state\n    const { searchBox, onSearchChange } = this.props\n\n    const filteredTeams = teams.filter(team => {\n      return team.strTeam.toLowerCase().includes(searchBox.toLowerCase()\n      )\n    })\n    if (!teams.length) {\n      return (\n        <div className=\"tc\">\n          <h1>PREMIER LEAGUE TEAMS</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <h1>Loading...</h1>\n        </div>\n      )\n    }\n    if (!filteredTeams.length) {\n      return (\n        <div className=\"tc\">\n          <h1>PREMIER LEAGUE TEAMS</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <h2>Couldn't find any team</h2>\n        </div>\n      )\n    }\n\n\n\n    return (\n\n      <div className=\"tc\" style={{overflow:'hidden'}}>\n        <h1>PREMIER LEAGUE TEAMS</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList teams={filteredTeams} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n\n\n\n    );\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCH_BOX } from './constants';\n\nexport const setSearchBox = (text)=>{\n  return{\n    type: CHANGE_SEARCH_BOX,\n    payload: text\n\n}\n\n  }\n","export const CHANGE_SEARCH_BOX = 'CHANGE_SEARCH_BOX'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_BOX } from './constants'\n\nconst initialState = {\n  searchBox: ''\n}\n\nexport const searchTeams = (state = initialState, action = {})=>{\n  switch (action.type) {\n    case CHANGE_SEARCH_BOX: \n      return Object.assign({}, state, { searchBox: action.payload })\n    default: return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport './index.css';\nimport 'tachyons';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchTeams } from './reducers';\n\n\nconst store = createStore(searchTeams)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App  store={store}/>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}